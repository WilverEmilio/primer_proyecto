/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/vwIhlmt5LjJ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import axios from "axios";

export function Proveedor() {
  const [proveedores, setProveedores] = useState([]);
  const [razon_social, setRazonSocial] = useState("");
  const [tipo_documento, setTipoDocumento] = useState("");
  const [num_documento, setNumDocumento] = useState("");
  const [direccion, setDireccion] = useState("");
  const [telefono, setTelefono] = useState("");
  const [email, setEmail] = useState("");
  const [url, setUrl] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editingId, setEditingId] = useState(null);

  useEffect(() => {
    fetchProveedores();
  }, []);

  const fetchProveedores = async () => {
    try {
      const response = await axios.get("http://localhost:8000/api/proveedoresObtener/");
      setProveedores(response.data);
    } catch (error) {
      console.error("Error al obtener los proveedores:", error);
    }
  };

  const handleAdd = () => {
    setShowForm(true);
    clearForm();
    setEditingId(null);
  };

  const handleEdit = (id) => {
    const proveedor = proveedores.find((item) => item.idproveedor === id);
    setRazonSocial(proveedor.razon_social);
    setTipoDocumento(proveedor.tipo_documento);
    setNumDocumento(proveedor.num_documento);
    setDireccion(proveedor.direccion);
    setTelefono(proveedor.telefono);
    setEmail(proveedor.email);
    setUrl(proveedor.url);
    setEditingId(id);
    setShowForm(true);
  };

  const handleSave = async () => {
    const proveedorData = {
      razon_social,
      tipo_documento,
      num_documento,
      direccion,
      telefono,
      email,
      url,
    };

    try {
      if (editingId) {
        await axios.put(`http://localhost:8000/api/proveedoresActualizar/${editingId}/`, proveedorData);
        setProveedores(proveedores.map(item => item.idproveedor === editingId ? { ...proveedorData, idproveedor: editingId } : item));
      } else {
        const response = await axios.post("http://localhost:8000/api/proveedores/", proveedorData);
        setProveedores([...proveedores, response.data]);
      }
      setShowForm(false);
      clearForm();
    } catch (error) {
      console.error("Error al guardar el proveedor:", error);
    }
  };

  const clearForm = () => {
    setRazonSocial("");
    setTipoDocumento("");
    setNumDocumento("");
    setDireccion("");
    setTelefono("");
    setEmail("");
    setUrl("");
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:8000/api/proveedorDelete/${id}/`);
      fetchProveedores();
    } catch (error) {
      console.error("Error al eliminar el proveedor:", error);
    }
  };

  const handleCloseForm = () => {
    setShowForm(false);
    clearForm();
    setEditingId(null);
  };

  return (
    <div className="w-full max-w-3xl mx-auto">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-2xl font-bold mb-2">Proveedores</h2>
          <p className="text-muted-foreground">Completa los campos a continuación.</p>
        </div>
        <Button onClick={handleAdd}>Agregar</Button>
      </div>
      {showForm && (
        <Card className="w-full max-w-md mt-4 relative z-10">
          <button
            className="absolute top-4 right-4 text-muted-foreground hover:text-primary"
            onClick={handleCloseForm}>
            <XIcon className="w-5 h-5" />
          </button>
          <CardHeader>
            <CardTitle>Proveedor</CardTitle>
            <CardDescription>Completa los campos a continuación.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="razon_social">Razón Social</Label>
              <Input
                id="razon_social"
                placeholder="Ingresa la razón social"
                value={razon_social}
                onChange={(e) => setRazonSocial(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="tipo_documento">Tipo de Documento</Label>
              <Input
                id="tipo_documento"
                placeholder="Ingresa el tipo de documento"
                value={tipo_documento}
                onChange={(e) => setTipoDocumento(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="num_documento">Número de Documento</Label>
              <Input
                id="num_documento"
                placeholder="Ingresa el número de documento"
                value={num_documento}
                onChange={(e) => setNumDocumento(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="direccion">Dirección</Label>
              <Input
                id="direccion"
                placeholder="Ingresa la dirección"
                value={direccion}
                onChange={(e) => setDireccion(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="telefono">Teléfono</Label>
              <Input
                id="telefono"
                placeholder="Ingresa el teléfono"
                value={telefono}
                onChange={(e) => setTelefono(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                placeholder="Ingresa el email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="url">URL</Label>
              <Input
                id="url"
                placeholder="Ingresa la URL"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button onClick={handleSave}>Guardar</Button>
          </CardFooter>
        </Card>
      )}
      <div className="border rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>ID</TableHead>
              <TableHead>Razón Social</TableHead>
              <TableHead>Tipo de Documento</TableHead>
              <TableHead>Número de Documento</TableHead>
              <TableHead>Dirección</TableHead>
              <TableHead>Teléfono</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>URL</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {proveedores.map((item) => (
              <TableRow key={item.idproveedor}>
                <TableCell>{item.idproveedor}</TableCell>
                <TableCell>{item.razon_social}</TableCell>
                <TableCell>{item.tipo_documento}</TableCell>
                <TableCell>{item.num_documento}</TableCell>
                <TableCell>{item.direccion}</TableCell>
                <TableCell>{item.telefono}</TableCell>
                <TableCell>{item.email}</TableCell>
                <TableCell>{item.url}</TableCell>
                <TableCell>
                  <div className="flex gap-2">
                    <Button onClick={() => handleEdit(item.idproveedor)}>Editar</Button>
                    <Button onClick={() => handleDelete(item.idproveedor)}>Eliminar</Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
