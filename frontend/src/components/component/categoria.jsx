/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/nVGFwWwBZZG
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from "@/components/ui/alert"

export function categoria() {
  const [showForm, setShowForm] = useState(false)
  const [data, setData] = useState([
    {
      id: 1,
      name: "John Doe",
      description: "This is a sample description.",
    },
    {
      id: 2,
      name: "Jane Smith",
      description: "Another sample description.",
    },
    {
      id: 3,
      name: "Bob Johnson",
      description: "This is a third sample description.",
    },
  ])
  const [editingId, setEditingId] = useState(null)
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false)
  const [deleteId, setDeleteId] = useState(null)
  const handleAdd = () => {
    setShowForm(true)
    setEditingId(null)
  }
  const handleEdit = (id) => {
    setShowForm(true)
    setEditingId(id)
  }
  const handleDelete = (id) => {
    setShowDeleteConfirmation(true)
    setDeleteId(id)
  }
  const handleConfirmDelete = () => {
    setData(data.filter((item) => item.id !== deleteId))
    setShowDeleteConfirmation(false)
    setDeleteId(null)
  }
  const handleCancelDelete = () => {
    setShowDeleteConfirmation(false)
    setDeleteId(null)
  }
  const handleSave = () => {
    const name = document.getElementById("name").value
    const description = document.getElementById("description").value
    if (editingId) {
      setData(data.map((item) => {
        if (item.id === editingId) {
          return { ...item, name, description }
        }
        return item
      }))
    } else {
      setData([...data, { id: data.length + 1, name, description }])
    }
    setShowForm(false)
    setEditingId(null)
  }
  const handleCloseForm = () => {
    setShowForm(false)
    setEditingId(null)
  }
  return (
    (<div className="w-full max-w-3xl mx-auto">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-2xl font-bold mb-2">Categoría</h2>
          <p className="text-muted-foreground">Completa los campos a continuación.</p>
        </div>
        <Button onClick={handleAdd}>Agregar</Button>
      </div>
      {showForm && (
        <Card className="w-full max-w-md mt-4 relative z-10">
          <button
            className="absolute top-4 right-4 text-muted-foreground hover:text-primary"
            onClick={handleCloseForm}>
            <XIcon className="w-5 h-5" />
          </button>
          <CardHeader>
            <CardTitle>Categoría</CardTitle>
            <CardDescription>Completa los campos a continuación.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Nombre</Label>
              <Input
                id="name"
                placeholder="Ingresa tu nombre"
                defaultValue={editingId ? data.find((item) => item.id === editingId).name : ""} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="description">Descripción</Label>
              <Textarea
                id="description"
                placeholder="Escribe una breve descripción"
                rows={3}
                defaultValue={editingId ? data.find((item) => item.id === editingId).description : ""} />
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button onClick={handleSave}>Guardar</Button>
          </CardFooter>
        </Card>
      )}
      <div className="border rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>ID</TableHead>
              <TableHead>Nombre</TableHead>
              <TableHead>Descripción</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.id}</TableCell>
                <TableCell>{item.name}</TableCell>
                <TableCell>{item.description}</TableCell>
                <TableCell>
                  <div className="flex gap-2">
                    <Button onClick={() => handleEdit(item.id)}>Editar</Button>
                    <Button onClick={() => handleDelete(item.id)}>Eliminar</Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      {showDeleteConfirmation && (
        <AlertDialog>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
              <AlertDialogDescription>Esta acción no se puede deshacer.</AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={handleCancelDelete}>Cancelar</AlertDialogCancel>
              <AlertDialogAction onClick={handleConfirmDelete}>Eliminar</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>)
  );
}

function XIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>)
  );
}
