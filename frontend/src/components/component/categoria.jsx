/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/nVGFwWwBZZG
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useEffect } from "react";
import axios from "axios";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from "@/components/ui/alert";

export function Categoria() {
  const [categorias, setCategorias] = useState([]);
  const [nombre, setNombre] = useState("");
  const [descripcion, setDescripcion] = useState("");
  const [editingId, setEditingId] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [deleteId, setDeleteId] = useState(null);

  useEffect(() => {
    // Obtener los datos al montar el componente
    axios.get("http://localhost:8000/api/categoriasObtener/")
      .then((response) => {
        setCategorias(response.data);
      })
      .catch((error) => {
        console.error("Error al obtener las categorías:", error);
      });
  }, []);

  const handleAdd = () => {
    setShowForm(true);
    setEditingId(null);
    setNombre("");
    setDescripcion("");
  };

  const handleEdit = (id) => {
    const categoria = categorias.find((item) => item.idcategoria === id);
    setNombre(categoria.nombre);
    setDescripcion(categoria.descripcion);
    setEditingId(id);
    setShowForm(true);
  };

  const handleSave = async () => {
    try {
      if (editingId) {
        // Editar la categoría
        await axios.put(`http://localhost:8000/api/categoria/${editingId}`, {
          nombre,
          descripcion,
        });
        setCategorias(categorias.map((item) => (item.idcategoria === editingId ? { ...item, nombre, descripcion } : item)));
      } else {
        // Crear nueva categoría
        const response = await axios.post("http://localhost:8000/api/categorias/", {
          nombre,
          descripcion,
        });
        setCategorias([...categorias, response.data]);
      }
      setShowForm(false);
      setEditingId(null);
    } catch (error) {
      console.error("Error al guardar la categoría:", error);
    }
  };

  const handleDelete = (id) => {
    setShowDeleteConfirmation(true);
    setDeleteId(id);
  };

  const handleConfirmDelete = async () => {
    try {
      await axios.delete(`http://localhost:8000/api/categoria/${deleteId}`);
      setCategorias(categorias.filter((item) => item.idcategoria !== deleteId));
      setShowDeleteConfirmation(false);
      setDeleteId(null);
    } catch (error) {
      console.error("Error al eliminar la categoría:", error);
    }
  };

  const handleCancelDelete = () => {
    setShowDeleteConfirmation(false);
    setDeleteId(null);
  };

  return (
    <div className="w-full max-w-3xl mx-auto">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-2xl font-bold mb-2">Categoría</h2>
          <p className="text-muted-foreground">Gestiona las categorías del sistema.</p>
        </div>
        <Button onClick={handleAdd}>Agregar</Button>
      </div>

      {showForm && (
        <Card className="w-full max-w-md mt-4">
          <CardHeader>
            <CardTitle>{editingId ? "Editar Categoría" : "Nueva Categoría"}</CardTitle>
            <CardDescription>Completa los campos a continuación.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="nombre">Nombre</Label>
              <Input id="nombre" value={nombre} onChange={(e) => setNombre(e.target.value)} placeholder="Nombre de la categoría" />
            </div>
            <div>
              <Label htmlFor="descripcion">Descripción</Label>
              <Textarea id="descripcion" value={descripcion} onChange={(e) => setDescripcion(e.target.value)} placeholder="Descripción de la categoría" rows={3} />
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button onClick={handleSave}>{editingId ? "Guardar cambios" : "Guardar"}</Button>
          </CardFooter>
        </Card>
      )}

      <div className="border rounded-lg overflow-hidden mt-6">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>ID</TableHead>
              <TableHead>Nombre</TableHead>
              <TableHead>Descripción</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {categorias.map((categoria) => (
              <TableRow key={categoria.idcategoria}>
                <TableCell>{categoria.idcategoria}</TableCell>
                <TableCell>{categoria.nombre}</TableCell>
                <TableCell>{categoria.descripcion}</TableCell>
                <TableCell>
                  <div className="flex gap-2">
                    <Button onClick={() => handleEdit(categoria.idcategoria)}>Editar</Button>
                    <Button onClick={() => handleDelete(categoria.idcategoria)}>Eliminar</Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {showDeleteConfirmation && (
        <AlertDialog>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
              <AlertDialogDescription>Esta acción no se puede deshacer.</AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={handleCancelDelete}>Cancelar</AlertDialogCancel>
              <AlertDialogAction onClick={handleConfirmDelete}>Eliminar</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>
  );
}
