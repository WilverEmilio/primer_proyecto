/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/siaNwWFubvm
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Usuario() {
  const [showForm, setShowForm] = useState(false)
  const [data, setData] = useState([
    {
      id: 1,
      usuario: "jdoe",
      contrasena: "password123",
      rol: "admin",
      email: "jdoe@example.com",
      disponible: true,
      idempleado: 1,
    },
    {
      id: 2,
      usuario: "msmith",
      contrasena: "abc123",
      rol: "user",
      email: "msmith@example.com",
      disponible: true,
      idempleado: 2,
    },
    {
      id: 3,
      usuario: "jbrown",
      contrasena: "xyz456",
      rol: "user",
      email: "jbrown@example.com",
      disponible: false,
      idempleado: 3,
    },
  ])
  const [editingId, setEditingId] = useState(null)
  const [showDisableConfirmation, setShowDisableConfirmation] = useState(false)
  const [disableId, setDisableId] = useState(null)
  const [empleados, setEmpleados] = useState([
    { id: 1, nombre: "John Doe" },
    { id: 2, nombre: "Mary Smith" },
    { id: 3, nombre: "Jane Brown" },
  ])
  const handleAdd = () => {
    setShowForm(true)
    setEditingId(null)
  }
  const handleEdit = (id) => {
    setShowForm(true)
    setEditingId(id)
  }
  const handleDisable = (id) => {
    setShowDisableConfirmation(true)
    setDisableId(id)
  }
  const handleConfirmDisable = () => {
    setData(data.map((item) => {
      if (item.id === disableId) {
        return { ...item, disponible: !item.disponible }
      }
      return item
    }))
    setShowDisableConfirmation(false)
    setDisableId(null)
  }
  const handleCancelDisable = () => {
    setShowDisableConfirmation(false)
    setDisableId(null)
  }
  const handleSave = () => {
    const usuario = document.getElementById("usuario").value
    const contrasena = document.getElementById("contrasena").value
    const rol = document.getElementById("rol").value
    const email = document.getElementById("email").value
    const idempleado = document.getElementById("idempleado").value
    if (editingId) {
      setData(data.map((item) => {
        if (item.id === editingId) {
          return { ...item, usuario, contrasena, rol, email, idempleado }
        }
        return item
      }))
    } else {
      setData(
        [...data, { id: data.length + 1, usuario, contrasena, rol, email, disponible: true, idempleado }]
      )
    }
    setShowForm(false)
    setEditingId(null)
  }
  const handleCloseForm = () => {
    setShowForm(false)
    setEditingId(null)
  }
  return (
    (<div className="w-full max-w-3xl mx-auto">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-2xl font-bold mb-2">Usuarios</h2>
          <p className="text-muted-foreground">Completa los campos a continuaci칩n.</p>
        </div>
        <Button onClick={handleAdd}>Agregar</Button>
      </div>
      {showForm && (
        <Card className="w-full max-w-md mt-4 relative z-10">
          <button
            className="absolute top-4 right-4 text-muted-foreground hover:text-primary"
            onClick={handleCloseForm}>
            <XIcon className="w-5 h-5" />
          </button>
          <CardHeader>
            <CardTitle>Usuario</CardTitle>
            <CardDescription>Completa los campos a continuaci칩n.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="usuario">Usuario</Label>
              <Input
                id="usuario"
                placeholder="Ingresa el usuario"
                defaultValue={editingId ? data.find((item) => item.id === editingId).usuario : ""} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="contrasena">Contrase침a</Label>
              <Input
                id="contrasena"
                type="password"
                placeholder="Ingresa la contrase침a"
                defaultValue={editingId ? data.find((item) => item.id === editingId).contrasena : ""} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="rol">Rol</Label>
              <Select
                id="rol"
                defaultValue={editingId ? data.find((item) => item.id === editingId).rol : ""}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Selecciona un rol" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="gerente">Gerente</SelectItem>
                  <SelectItem value="cajero">Cajero</SelectItem>
                  <SelectItem value="bodeguero">Bodegero</SelectItem>
                  <SelectItem value="dependiente">Dependiente</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Ingresa el email"
                defaultValue={editingId ? data.find((item) => item.id === editingId).email : ""} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="idempleado">ID Empleado</Label>
              <Select
                id="idempleado"
                defaultValue={editingId ? data.find((item) => item.id === editingId).idempleado : ""}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Selecciona un empleado" />
                </SelectTrigger>
                <SelectContent>
                  {empleados.map((empleado) => (
                    <SelectItem key={empleado.id} value={empleado.id}>
                      {empleado.nombre}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button onClick={handleSave}>Guardar</Button>
          </CardFooter>
        </Card>
      )}
      <div className="border rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>ID</TableHead>
              <TableHead>Usuario</TableHead>
              <TableHead>Rol</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Disponible</TableHead>
              <TableHead>ID Empleado</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.id}</TableCell>
                <TableCell>{item.usuario}</TableCell>
                <TableCell>{item.rol}</TableCell>
                <TableCell>{item.email}</TableCell>
                <TableCell>{item.disponible ? "S\u00ED" : "No"}</TableCell>
                <TableCell>{empleados.find((empleado) => empleado.id === item.idempleado)?.nombre}</TableCell>
                <TableCell>
                  <div className="flex gap-2">
                    <Button onClick={() => handleEdit(item.id)}>Editar</Button>
                    <Button onClick={() => handleDisable(item.id)}>
                      {item.disponible ? "Deshabilitar" : "Habilitar"}
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>)
  );
}

function XIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>)
  );
}
